// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IntegrationTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Calendar")]
    public partial class CalendarFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Calendar.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Calendar", "\tTesting calendar functionality", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Correctly added booking for rental with 1 unit and check calendar")]
        public virtual void CorrectlyAddedBookingForRentalWith1UnitAndCheckCalendar()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Correctly added booking for rental with 1 unit and check calendar", null, tagsOfScenario, argumentsOfScenario);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("rental with 1 units and preparation time 2 is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.And("booking for \"2031-01-03\" for 3 nights is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
 testRunner.And("booking for \"2031-01-08\" for 1 nights is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
 testRunner.And("booking for \"2031-01-12\" for 2 nights is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.When("get calendar by rental id from \"2031-01-02\" and 10 nights", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "date",
                            "booked unit",
                            "prepared unit"});
                table1.AddRow(new string[] {
                            "2031-01-02",
                            "",
                            ""});
                table1.AddRow(new string[] {
                            "2031-01-03",
                            "1",
                            ""});
                table1.AddRow(new string[] {
                            "2031-01-04",
                            "1",
                            ""});
                table1.AddRow(new string[] {
                            "2031-01-05",
                            "1",
                            ""});
                table1.AddRow(new string[] {
                            "2031-01-06",
                            "",
                            "1"});
                table1.AddRow(new string[] {
                            "2031-01-07",
                            "",
                            "1"});
                table1.AddRow(new string[] {
                            "2031-01-08",
                            "1",
                            ""});
                table1.AddRow(new string[] {
                            "2031-01-09",
                            "",
                            "1"});
                table1.AddRow(new string[] {
                            "2031-01-10",
                            "",
                            "1"});
                table1.AddRow(new string[] {
                            "2031-01-11",
                            "",
                            ""});
#line 10
 testRunner.Then("the result should be 200 and data", ((string)(null)), table1, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Co4444rrectly added booking for rental with 3 unit and check calendar")]
        public virtual void Co4444RrectlyAddedBookingForRentalWith3UnitAndCheckCalendar()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Co4444rrectly added booking for rental with 3 unit and check calendar", null, tagsOfScenario, argumentsOfScenario);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 24
 testRunner.Given("rental with 3 units and preparation time 2 is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
 testRunner.And("booking for \"2031-02-02\" for 3 nights is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And("booking for \"2031-02-03\" for 4 nights is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And("booking for \"2031-02-04\" for 3 nights is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And("booking for \"2031-02-08\" for 2 nights is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.When("get calendar by rental id from \"2031-02-01\" and 10 nights", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "date",
                            "booked unit",
                            "prepared  unit"});
                table2.AddRow(new string[] {
                            "2031-02-01",
                            "",
                            ""});
                table2.AddRow(new string[] {
                            "2031-02-02",
                            "1",
                            ""});
                table2.AddRow(new string[] {
                            "2031-02-03",
                            "1",
                            ""});
                table2.AddRow(new string[] {
                            "2031-02-03",
                            "2",
                            ""});
                table2.AddRow(new string[] {
                            "2031-02-04",
                            "1",
                            ""});
                table2.AddRow(new string[] {
                            "2031-02-04",
                            "2",
                            ""});
                table2.AddRow(new string[] {
                            "2031-02-04",
                            "3",
                            ""});
                table2.AddRow(new string[] {
                            "2031-02-05",
                            "2",
                            ""});
                table2.AddRow(new string[] {
                            "2031-02-05",
                            "3",
                            ""});
                table2.AddRow(new string[] {
                            "2031-02-05",
                            "",
                            "1"});
                table2.AddRow(new string[] {
                            "2031-02-06",
                            "2",
                            ""});
                table2.AddRow(new string[] {
                            "2031-02-06",
                            "3",
                            ""});
                table2.AddRow(new string[] {
                            "2031-02-06",
                            "",
                            "1"});
                table2.AddRow(new string[] {
                            "2031-02-07",
                            "",
                            "2"});
                table2.AddRow(new string[] {
                            "2031-02-07",
                            "",
                            "3"});
                table2.AddRow(new string[] {
                            "2031-02-08",
                            "1",
                            ""});
                table2.AddRow(new string[] {
                            "2031-02-08",
                            "",
                            "2"});
                table2.AddRow(new string[] {
                            "2031-02-08",
                            "",
                            "3"});
                table2.AddRow(new string[] {
                            "2031-02-09",
                            "1",
                            ""});
                table2.AddRow(new string[] {
                            "2031-02-10",
                            "",
                            "1"});
#line 30
 testRunner.Then("the result should be 200 and data", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("+++++   Correctly added booking for rental with 3 unit and check calendar")]
        public virtual void CorrectlyAddedBookingForRentalWith3UnitAndCheckCalendar()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("+++++   Correctly added booking for rental with 3 unit and check calendar", null, tagsOfScenario, argumentsOfScenario);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 54
 testRunner.Given("rental with 3 units and preparation time 2 is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 55
 testRunner.And("booking for \"2031-02-02\" for 3 nights is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
 testRunner.And("booking for \"2031-02-03\" for 4 nights is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.And("booking for \"2031-02-08\" for 3 nights is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
    testRunner.And("booking for \"2031-02-10\" for 3 nights is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.And("update1 rental by setting 3 units and preparation time 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.When("get calendar by rental id after updates from \"2031-02-01\" and 10 nights", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "date",
                            "booked unit",
                            "prepared  unit"});
                table3.AddRow(new string[] {
                            "2031-02-01",
                            "",
                            ""});
                table3.AddRow(new string[] {
                            "2031-02-02",
                            "1",
                            ""});
                table3.AddRow(new string[] {
                            "2031-02-03",
                            "1",
                            ""});
                table3.AddRow(new string[] {
                            "2031-02-03",
                            "2",
                            ""});
                table3.AddRow(new string[] {
                            "2031-02-04",
                            "1",
                            ""});
                table3.AddRow(new string[] {
                            "2031-02-04",
                            "2",
                            ""});
                table3.AddRow(new string[] {
                            "2031-02-05",
                            "2",
                            ""});
                table3.AddRow(new string[] {
                            "2031-02-05",
                            "",
                            "1"});
                table3.AddRow(new string[] {
                            "2031-02-06",
                            "2",
                            ""});
                table3.AddRow(new string[] {
                            "2031-02-06",
                            "",
                            "1"});
                table3.AddRow(new string[] {
                            "2031-02-07",
                            "",
                            "1"});
                table3.AddRow(new string[] {
                            "2031-02-07",
                            "",
                            "2"});
                table3.AddRow(new string[] {
                            "2031-02-08",
                            "1",
                            ""});
                table3.AddRow(new string[] {
                            "2031-02-08",
                            "",
                            "2"});
                table3.AddRow(new string[] {
                            "2031-02-09",
                            "1",
                            ""});
                table3.AddRow(new string[] {
                            "2031-02-09",
                            "",
                            "2"});
                table3.AddRow(new string[] {
                            "2031-02-10",
                            "1",
                            ""});
                table3.AddRow(new string[] {
                            "2031-02-10",
                            "2",
                            ""});
#line 61
 testRunner.Then("the result should be 200 and data", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
